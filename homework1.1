#1.Найти все числа от 1 до 1000, которые делятся на 17 без остатка # range(1, 1001)
for i in range(1, 1001):
    if i%17 == 0:
        print(i)
        

#2.Найти все числа от 1 до 1000, которые содержат в себе цифру 2
for i in range(1, 1001):
    if "2" in str(i):
        print(i)



#3.Найти все числа от 1 до 10000, которые являются палиндромом
for i in range(1, 10001):
    if str(i) == str(i)[::-1]:
        print(i)



#4.Посчитать количество пробелов в строке
string = "A simple sentence has the most basic elements that make it a sentence: a subject a verb and a completed thought"
print(string.count(" "))



#5.Есть любая последовательность непробельных символов латинского алфавита, удалить все гласные из этого слова.
vowels = ["a", "e", "i", "o", "u", "y"]
input_str = "HelloEarth"
result = []
for c in input_str:
    if c.lower() not in vowels:
        result.append(c)
result_str = "".join(result)

print(result_str)



#6.На входе строка со словами, разделенными через 1 пробел. Найти все слова, длина которых не больше 5.
string = "A simple sentence has the most basic elements that make it a sentence: a subject a verb and a completed thought"

for i in string.split():
    if len(i) <= 5:
        print(i)
        
        
#7.На входе строка со словами, разделенными через 1 пробел. Получить словарь, где в качестве ключа используется само слово, а в значении длина этого слова.
string = "A simple sentence has the most basic elements that make it a sentence: a subject a verb and a completed thought"

out = {}
for i in string.split():
    out[i] = len(i)
print(out)



#8.На входе предложение со всеми пробельными и непробельными символами латинского алфавита. Получить словарь используемых букв в строке, то есть на выходе список уникальных букв.
l = []
string = "A simple sentence has the most basic elements that make it a sentence: a subject a verb and a completed thought"
for i in string:
    if not (i in l):
        l.append(i)
print(l)



#9.На входе список чисел, получить список квадратов этих чисел
func_square = lambda x: x * x
l = [2, 5, 7, 8, 10]
print(list(map(func_square, l)))



#10.На входе список координат, например, [(1, 1), (2, 3), (5, 3)]. Найти все точки, которые принадлежат прямой y = 5 * x - 2. На выходе получить словарь из самой точки и расстояния до этой точки из начала координат (0, 0)
l = [(1, 1), (2, 3), (5, 3), (2, 8)]
out = {}
for i in l:
    if i[1] == 5 * i[0] - 2:
        out[i] = math.sqrt(math.pow(i[0], 2) + math.pow(i[1], 2))
print(out)



#11.Возвести в квадрат все четные числа от 2 до 27. На выходе список.
l = []
for i in range(2, 28):
    if i%2 == 0:
        l.append(i*i)
print(l)



#12.На входе список из координат точек на плоскости. Найти расстояние до самой удаленной точки от начала координат (0, 0) в первой четверти.
l = [(1, 1), (2, 3), (5, 3), (2, 8), (1, -11)]
out = 0
for i in l:
    if i[0] >= 0 and i[1] >= 0:
        out = max(out, math.sqrt(math.pow(i[0], 2) + math.pow(i[1], 2)))
print(out)



#13.На входе два списка чисел nums_first = [1, 2, 3, 5, 8] и nums_second = [2, 4, 8, 16, 32]. Получить пары сумм и разниц, [(3, -1), (6, -2), (11, -5), ...]
nums_first = [1, 2, 3, 5, 8]
nums_second = [2, 4, 8, 16, 32]

la = lambda x, y: (x + y, x - y)

print(list(map(la, nums_first, nums_second)))



#14.На входе список строк из чисел, например, ['43141', '32441', '431', '4154', '43121']. Найти четные квадраты этих чисел. Ответ записать снова в список из строк, то есть сформировать обратно список строк, но уже отфильтровать все четные квадраты.
import math
l = ['43141', '32441', '431', '4154', '43121']
nl = []
for i in l:
    n = int(math.pow(int(i), 2))
    if n%2 == 0:
        nl.append(n)
print(nl)



#15. Менеджер как обычно придумал свое представление данных, а нам оно не подходит. Мы хотим получить нормальную таблицу, чтобы импортировать в csv
input_str = """name,Petya,Vasya,Masha,Vova
grade,5,5,8,3
subject,math,language,physics,math
year,1999,2000,1995,1998"""

out = []
mapped = {}
for i in input_str.split("\n"):
    line = i.split(",")
    mapped[line[0]] = line[1:]

for name, grade, subject, year in zip(mapped["name"], mapped["grade"], mapped["subject"], mapped["year"]):
    out.append({"name": name, "grade": grade, "subject": subject, "year": year})

print(out)




#16. Получить сумму по столбцам у двумерного списка
a = [[11.9, 12.2, 12.9],
    [15.3, 15.1, 15.1], 
    [16.3, 16.5, 16.5],
    [17.7, 17.5, 18.1]]
result = [61.2, 61.3, 62.6]   


l = list(zip(*a))
res = []
for i in l:
    res.append(sum(i))
print(res)         
